{"version":3,"sources":["Config.js","components/deck/index.js","components/deck/Deck.js","components/hand/index.js","components/hand/Hand.js","components/score/index.js","components/score/Score.js","components/points/index.js","components/points/Points.js","components/battle/index.js","components/battle/Battle.js","components/played/index.js","components/played/Played.js","components/discard/index.js","components/discard/Discard.js","components/app/App.js","components/app/index.js","serviceWorker.js","index.js"],"names":["Object","freeze","battleTime","clearTime","pointsToScoreTime","Deck","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","cards","_this2","react_default","a","createElement","id","concat","output","i","parseInt","size","card","src","className","style","right","bottom","key","alt","push","renderCardStack","quantity","undefined","hand","shift","setCards","length","suitToLetter","suit","deck","j","faceValue","front","back","shuffle","slice","setState","React","Component","Hand","setSelectedCards","selected","_loop","_cards$i","graphic","player","isSelected","indexOf","onClick","onSelected","renderCards","notSelected","Set","has","splice","Error","cardIndex","Score","score","amount","Math","max","forceUpdate","Points","points","final","value","Battle","winner","tie","setTimeout","Config","Played","left","Discard","cardsToAdd","GameState","SelectHand","PlayCards","TallyPoints","GameOver","App","handleCardClick","gameState","selectCards","keepCards","discard","current","addCards","getNotSelected","cpu","hold","setGameState","playCard","cpuCard","play","playerCard","cpuWinner","playerWinner","battle","setCardAndResults","increment","played","addCard","createRef","startNewGame","ref","playerScore","cpuScore","renderGameOver","remaining","instructions","shuffleNewDeck","reset","draw","randomHand","newState","_this3","startNewRound","startNewBattle","playerPoints","cpuPoints","setFinal","maxToSelect","idx","Boolean","window","location","hostname","match","Array","prototype","temporaryValue","randomIndex","currentIndex","floor","random","ReactDOM","render","app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1266440f.chunk.js","sourcesContent":["export default Object.freeze({\r\n    battleTime: 1000,\r\n    clearTime: 3000,\r\n    pointsToScoreTime: 2000\r\n});","import Deck from './Deck';\r\n\r\nexport default Deck;","import React from 'react';\r\nimport './Deck.css';\r\n\r\nclass Deck extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {cards: []};\r\n        this.cards = [];\r\n    }\r\n\r\n    render() {\r\n        const renderCardStack = () => {\r\n            const output = [];\r\n            for (let i = 0; i < parseInt(this.size() / 5); i++) {\r\n                const card = <img src=\"/images/cards/b.gif\" className=\"card stacked\"\r\n                                  style={{right: (i * 2) + 'px', bottom: i + 'px'}}\r\n                                  key={i}\r\n                                  alt=\"card\"/>;\r\n                output.push(card);\r\n            }\r\n            return output;\r\n        };\r\n\r\n        return (\r\n            <div id={`${this.props.id}`}>\r\n                {renderCardStack()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    // ----- Public Functions --------------------\r\n\r\n    draw(quantity) {\r\n        if (quantity <= 0)\r\n            return [];\r\n        if (quantity === undefined)\r\n            quantity = 1;\r\n\r\n        const cards = this.cards;\r\n        const hand = [];\r\n        while (quantity--)\r\n            hand.push(cards.shift());\r\n\r\n        this.setCards(cards);\r\n        return hand;\r\n    }\r\n\r\n    size() {\r\n        return this.cards.length;\r\n    }\r\n\r\n    shuffleNewDeck() {\r\n        const suitToLetter = (suit) => {\r\n            switch (suit) {\r\n                case 0:\r\n                    return 'c';\r\n                case 1:\r\n                    return 'd';\r\n                case 2:\r\n                    return 'h';\r\n                case 3:\r\n                    return 's';\r\n                default:\r\n                    return '';\r\n            }\r\n        };\r\n\r\n        const deck = [];\r\n        for (let i = 1; i <= 13; i++) {\r\n            for (let j = 0; j < 4; j++)\r\n                deck.push({faceValue: i, front: i + suitToLetter(j) + '.gif', back: 'b.gif'});\r\n        }\r\n        deck.shuffle();\r\n\r\n        this.setCards(deck);\r\n    };\r\n\r\n    setCards(cards) {\r\n        this.cards = cards.slice();\r\n\r\n        this.setState({\r\n            cards: cards.slice()\r\n        });\r\n    }\r\n}\r\n\r\nexport default Deck;","import Hand from './Hand';\r\n\r\nexport default Hand;","import React from 'react';\r\nimport './Hand.css';\r\n\r\nclass Hand extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            cards: [],\r\n            selected: []\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const cards = this.state.cards;\r\n\r\n        const renderCards = () => {\r\n            const output = [];\r\n            for (let i = 0; i < cards.length; i++) {\r\n                const {front, back} = cards[i];\r\n                const graphic = this.props.player ? front : back;\r\n                const isSelected = this.state.selected.indexOf(i) !== -1;\r\n                const card =\r\n                    <div className={\"card spread\" + (isSelected ? \" selected\" : \"\")} key={i}>\r\n                        <img src={'/images/cards/' + graphic}\r\n                             className=\"card\" alt=\"card\"\r\n                             onClick={\r\n                                 this.props.onSelected\r\n                                     ? () => this.props.onSelected(i)\r\n                                     : null}/>\r\n                    </div>;\r\n                output.push(card);\r\n            }\r\n            return output;\r\n        };\r\n\r\n        return (\r\n            <div id={`${this.props.id}`} className='hand'>\r\n                {renderCards()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    // ----- Public Functions --------------------\r\n\r\n    size() {\r\n        return this.state.cards.length;\r\n    }\r\n\r\n    setCards(cards) {\r\n        this.setState({cards: cards.slice()});\r\n    }\r\n\r\n    getNotSelected() {\r\n        const notSelected = [];\r\n        for (let i = 0; i < 5; i++) {\r\n            if (this.state.selected.indexOf(i) === -1)\r\n                notSelected.push(this.state.cards[i]);\r\n        }\r\n        return notSelected;\r\n    }\r\n\r\n    hold() {\r\n        const cards = this.state.cards;\r\n        const selected = new Set(this.state.selected);\r\n\r\n        for (let i = cards.length; i >= 0; i--) {\r\n            if (selected.has(i))\r\n                continue;\r\n            cards.splice(i, 1);\r\n        }\r\n\r\n        this.setState({\r\n            cards: cards,\r\n            selected: []\r\n        });\r\n    }\r\n\r\n    play() {\r\n        const cards = this.state.cards;\r\n        if (this.state.selected.length < 1)\r\n            throw new Error('Playing unselected cards');\r\n\r\n        const cardIndex = this.state.selected[0];\r\n        const card = cards.splice(cardIndex, 1)[0];\r\n        this.setState({cards: cards});\r\n        return card;\r\n    }\r\n\r\n\r\n    // ----- Interface Functions --------------------\r\n\r\n    setSelectedCards = (selected) => {\r\n        this.setState({selected: selected.slice()});\r\n    }\r\n}\r\n\r\n\r\nexport default Hand;","import Score from './Score';\r\n\r\nexport default Score;","import React from 'react';\r\nimport './Score.css';\r\n\r\nclass Score extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            score: 0\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id={`${this.props.id}`} className=\"score\">\r\n                score: {this.state.score}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // ----- Public Functions --------------------\r\n\r\n    reset() {\r\n        this.setState({\r\n            score: 0\r\n        });\r\n    }\r\n\r\n    value() {\r\n        return this.state.score;\r\n    }\r\n\r\n    increment(amount) {\r\n        this.setState({\r\n            score: Math.max(0, this.state.score + amount)\r\n        });\r\n        this.forceUpdate();\r\n    }\r\n}\r\n\r\nexport default Score;","import Points from './Points';\r\n\r\nexport default Points;","import React from 'react';\r\n\r\nclass Points extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            points: 0,\r\n            final: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if (this.state.points === 0)\r\n            return null;\r\n\r\n        return (\r\n            <div id={`${this.props.id}`} className=\"points\">\r\n                points: <span className={this.state.final ? 'final' : ''}>{this.state.points}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    // ----- Public Functions --------------------\r\n\r\n    reset() {\r\n        this.setState({\r\n            points: 0,\r\n            final: false\r\n        });\r\n    }\r\n\r\n    increment() {\r\n        this.setState({\r\n            points: this.state.points + 1\r\n        });\r\n    }\r\n\r\n    setFinal(value) {\r\n        this.setState({\r\n            points: value,\r\n            final: true\r\n        });\r\n    }\r\n\r\n    value() {\r\n        return this.state.points;\r\n    }\r\n\r\n}\r\n\r\nexport default Points;","import Battle from './Battle';\r\n\r\nexport default Battle;","import React from 'react';\r\nimport './Battle.css';\r\nimport Config from '../../Config';\r\n\r\nclass Battle extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            card: null,\r\n            winner: false,\r\n            tie: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.card)\r\n            return null;\r\n\r\n        const {front} = this.state.card;\r\n\r\n        return (\r\n            <div id={`${this.props.id}`} className=\"battle\">\r\n                {this.state.winner ? <div className=\"battle_result\">Winner!</div> : ''}\r\n                {this.state.tie ? <div className=\"battle_result\">Tie...</div> : ''}\r\n                <img src={'/images/cards/' + front} className=\"card\" alt=\"card\"/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    // ----- Public Functions --------------------\r\n\r\n    reset() {\r\n        this.setState({\r\n            card: null,\r\n            winner: false,\r\n            tie: false\r\n        });\r\n    }\r\n\r\n    setCardAndResults(card, winner, tie) {\r\n        this.setState({card: card});\r\n        setTimeout(() => this.setState({winner: winner, tie: tie}), Config.battleTime);\r\n    }\r\n}\r\n\r\nexport default Battle;","import Played from './Played';\r\n\r\nexport default Played;","import React from 'react';\r\nimport './Played.css';\r\n\r\nclass Played extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            cards: []\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const cards = this.state.cards;\r\n\r\n        const renderCards = () => {\r\n            const output = [];\r\n            for (let i = 0; i < cards.length; i++) {\r\n                const {front} = cards[i];\r\n                const card =\r\n                    <div className=\"card stacked\" style={{left: (i * 15) + 'px'}} key={i}>\r\n                        <img src={'/images/cards/' + front} className=\"card\" alt=\"card\"/>\r\n                    </div>;\r\n                output.push(card);\r\n            }\r\n            return output;\r\n        };\r\n\r\n        return (\r\n            <div id={`${this.props.id}`} className=\"played\">\r\n                {renderCards()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    // ----- Public Functions --------------------\r\n\r\n    reset() {\r\n        this.setState({cards: []})\r\n    }\r\n\r\n    addCard(card) {\r\n        const cards = this.state.cards.slice();\r\n        cards.push(card);\r\n        this.setState({cards: cards})\r\n    }\r\n}\r\n\r\nexport default Played;","import Discard from './Discard';\r\n\r\nexport default Discard;","import React from 'react';\r\n\r\nclass Discard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            cards: []\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const cards = this.state.cards;\r\n\r\n        const renderCards = () => {\r\n            const output = [];\r\n            for (let i = 0; i < cards.length; i++) {\r\n                const {back} = cards[i];\r\n                const card =\r\n                    <div className=\"card stacked\" style={{right: (i * 5) + 'px'}} key={i}>\r\n                        <img src={'/images/cards/' + back} className=\"card\" alt=\"card\"/>\r\n                    </div>;\r\n                output.push(card);\r\n            }\r\n            return output;\r\n        };\r\n\r\n        return (\r\n            <div id={`${this.props.id}`} className=\"discard\">\r\n                {renderCards()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    // ----- Public Functions --------------------\r\n\r\n    reset() {\r\n        this.setState({cards: []})\r\n    }\r\n\r\n    addCards(cardsToAdd) {\r\n        const cards = this.state.cards.concat(cardsToAdd);\r\n        this.setState({cards: cards})\r\n    }\r\n}\r\n\r\nexport default Discard;","import React from 'react';\r\nimport './App.css';\r\nimport Config from '../../Config';\r\nimport Deck from '../deck';\r\nimport Hand from '../hand';\r\nimport Score from '../score';\r\nimport Points from '../points';\r\nimport Battle from \"../battle\";\r\nimport Played from \"../played\";\r\nimport Discard from \"../discard\";\r\n\r\n\r\nconst GameState = Object.freeze({\r\n    SelectHand: 1,\r\n    PlayCards: 2,\r\n    Battle: 3,\r\n    TallyPoints: 4,\r\n    GameOver: 5\r\n});\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.deck = React.createRef();\r\n\r\n        this.player = {\r\n            hand: React.createRef(),\r\n            battle: React.createRef(),\r\n            discard: React.createRef(),\r\n            points: React.createRef(),\r\n            score: React.createRef(),\r\n            played: React.createRef(),\r\n        };\r\n\r\n        this.cpu = {\r\n            hand: React.createRef(),\r\n            battle: React.createRef(),\r\n            discard: React.createRef(),\r\n            points: React.createRef(),\r\n            score: React.createRef(),\r\n            played: React.createRef(),\r\n        };\r\n\r\n        this.state = {\r\n            gameState: -1,\r\n            selected: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startNewGame();\r\n    }\r\n\r\n    render() {\r\n        const instructions = () => {\r\n            switch (this.state.gameState) {\r\n                case GameState.SelectHand:\r\n                    const remaining = 3 - this.state.selected.length;\r\n                    if (remaining > 0)\r\n                        return <div>Select {remaining} more card{remaining === 1 ? '' : 's'} to keep</div>;\r\n\r\n                    return <button onClick={this.keepCards}>Keep Cards</button>;\r\n\r\n                case GameState.PlayCards:\r\n                    if (!this.state.selected.length)\r\n                        return <div>Select a card to play</div>;\r\n\r\n                    return <button onClick={this.playCard}>Play Card</button>;\r\n\r\n                case GameState.GameOver:\r\n                    return <button onClick={() => this.startNewGame}>Play Again</button>;\r\n\r\n                default:\r\n                    return null;\r\n            }\r\n        };\r\n\r\n        const renderGameOver = () => {\r\n            if (this.state.gameState !== GameState.GameOver)\r\n                return null;\r\n\r\n            const playerScore = this.player.score.current.value();\r\n            const cpuScore = this.cpu.score.current.value();\r\n\r\n            if (playerScore === cpuScore)\r\n                return <div id=\"game_over\">Tie Game!</div>;\r\n\r\n            if (playerScore > cpuScore)\r\n                return <div id=\"game_over\">You Win!</div>;\r\n\r\n            return <div id=\"game_over\">Computer Wins!</div>;\r\n        };\r\n\r\n\r\n        return (\r\n            <div>\r\n                <div id=\"game_board\">\r\n                    <Deck id='deck' ref={this.deck}/>\r\n                    <Hand id='my_hand' ref={this.player.hand} player={true} onSelected={this.handleCardClick}/>\r\n                    <Hand id=\"cpu_hand\" ref={this.cpu.hand} player={false}/>\r\n                    <Battle id=\"my_battle\" ref={this.player.battle}/>\r\n                    <Battle id=\"cpu_battle\" ref={this.cpu.battle}/>\r\n                    <Discard id=\"my_discard\" ref={this.player.discard}/>\r\n                    <Discard id=\"cpu_discard\" ref={this.cpu.discard}/>\r\n                    <Score id=\"my_score\" ref={this.player.score}/>\r\n                    <Score id=\"cpu_score\" ref={this.cpu.score}/>\r\n                    <Points id=\"my_points\" ref={this.player.points}/>\r\n                    <Points id=\"cpu_points\" ref={this.cpu.points}/>\r\n                    <Played id=\"my_played\" ref={this.player.played}/>\r\n                    <Played id=\"cpu_played\" ref={this.cpu.played}/>\r\n                    {renderGameOver()}\r\n                </div>\r\n                <div>\r\n                    {instructions()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    // ----- Internal Functions --------------------\r\n\r\n    startNewGame() {\r\n        this.setGameState(GameState.SelectHand);\r\n    };\r\n\r\n    startNewRound() {\r\n        // reshuffle deck if necessary\r\n        if (this.deck.current.size() < 10) {\r\n            this.deck.current.shuffleNewDeck();\r\n            this.player.played.current.reset();\r\n            this.cpu.played.current.reset();\r\n            this.player.discard.current.reset();\r\n            this.cpu.discard.current.reset();\r\n        }\r\n\r\n        this.player.hand.current.setCards(this.deck.current.draw(5));\r\n        this.cpu.hand.current.setCards(this.deck.current.draw(5));\r\n\r\n        const randomHand = [0, 1, 2, 3, 4].shuffle().splice(0, 3);\r\n        this.cpu.hand.current.setSelectedCards(randomHand);\r\n    }\r\n\r\n    startNewBattle() {\r\n        this.setState({selected: []});\r\n        this.player.hand.current.setSelectedCards([]);\r\n        this.cpu.hand.current.setSelectedCards([0]);\r\n    }\r\n\r\n    setGameState(newState) {\r\n        this.setState({\r\n            gameState: newState\r\n        });\r\n\r\n        switch (newState) {\r\n            case GameState.SelectHand:\r\n                this.startNewRound();\r\n                break;\r\n\r\n            case GameState.PlayCards:\r\n                this.startNewBattle();\r\n                break;\r\n\r\n            case GameState.Battle:\r\n                this.player.hand.current.setSelectedCards([]);\r\n                this.cpu.hand.current.setSelectedCards([]);\r\n                this.setState({selected: []});\r\n                break;\r\n\r\n            case GameState.TallyPoints:\r\n                this.player.battle.current.reset();\r\n                this.cpu.battle.current.reset();\r\n\r\n                let playerPoints = this.player.points.current.value();\r\n                let cpuPoints = this.cpu.points.current.value();\r\n\r\n                // check for a loss\r\n                if (playerPoints === 3)\r\n                    playerPoints = -3;\r\n                else if (cpuPoints === 3)\r\n                    cpuPoints = -3;\r\n\r\n                this.player.points.current.setFinal(playerPoints);\r\n                this.cpu.points.current.setFinal(cpuPoints);\r\n\r\n                setTimeout(() => {\r\n                    // reset points\r\n                    this.player.points.current.reset();\r\n                    this.cpu.points.current.reset();\r\n\r\n                    // add to score\r\n                    this.player.score.current.increment(playerPoints);\r\n                    this.cpu.score.current.increment(cpuPoints);\r\n\r\n                    // start another round or game over\r\n                    if (this.player.score.current.value() >= 10\r\n                        || this.cpu.score.current.value() >= 10) {\r\n                        this.setGameState(GameState.GameOver);\r\n                    } else {\r\n                        this.setGameState(GameState.SelectHand);\r\n                    }\r\n                }, Config.pointsToScoreTime);\r\n                break;\r\n\r\n            case GameState.GameOver:\r\n                break;\r\n        }\r\n    }\r\n\r\n    selectCards(cardIndex, maxToSelect) {\r\n        const selected = this.state.selected;\r\n        const idx = selected.indexOf(cardIndex);\r\n\r\n        if (idx !== -1) {\r\n            selected.splice(idx, 1);\r\n            this.setState({selected: selected.slice()});\r\n        } else if (selected.length < maxToSelect) {\r\n            selected.push(cardIndex);\r\n            this.setState({selected: selected.slice()});\r\n        }\r\n\r\n        this.player.hand.current.setSelectedCards(selected);\r\n    }\r\n\r\n\r\n    // ----- Interface Functions --------------------\r\n\r\n    handleCardClick = (cardIndex) => {\r\n        switch (this.state.gameState) {\r\n            case GameState.SelectHand:\r\n                this.selectCards(cardIndex, 3);\r\n                break;\r\n\r\n            case GameState.PlayCards:\r\n                this.selectCards(cardIndex, 1);\r\n                break;\r\n\r\n            default:\r\n                // do nothing\r\n                break;\r\n        }\r\n    };\r\n\r\n    keepCards = () => {\r\n        // discard the rest\r\n        this.player.discard.current.addCards(this.player.hand.current.getNotSelected());\r\n        this.cpu.discard.current.addCards(this.cpu.hand.current.getNotSelected());\r\n\r\n        // hold selected cards\r\n        this.player.hand.current.hold();\r\n        this.cpu.hand.current.hold();\r\n\r\n        this.setGameState(GameState.PlayCards);\r\n    };\r\n\r\n    playCard = () => {\r\n        this.setGameState(GameState.Battle);\r\n\r\n        const cpuCard = this.cpu.hand.current.play();\r\n        const playerCard = this.player.hand.current.play();\r\n\r\n        const tie = cpuCard.faceValue === playerCard.faceValue;\r\n        const cpuWinner = cpuCard.faceValue > playerCard.faceValue;\r\n        const playerWinner = !tie && !cpuWinner;\r\n\r\n        this.player.battle.current.setCardAndResults(playerCard,\r\n            playerWinner,\r\n            tie);\r\n\r\n        this.cpu.battle.current.setCardAndResults(cpuCard,\r\n            cpuWinner,\r\n            tie);\r\n\r\n        if (playerWinner) {\r\n            setTimeout(() => {\r\n                this.player.points.current.increment();\r\n            }, Config.battleTime);\r\n        } else if (cpuWinner) {\r\n            setTimeout(() => {\r\n                this.cpu.points.current.increment();\r\n            }, Config.battleTime);\r\n        }\r\n\r\n        const moveCardsToPlayed = () => {\r\n            // set battle results\r\n            this.player.battle.current.setCardAndResults(null, false, false);\r\n            this.cpu.battle.current.setCardAndResults(null, false, false);\r\n\r\n            // add cards to played\r\n            this.player.played.current.addCard(playerCard);\r\n            this.cpu.played.current.addCard(cpuCard);\r\n\r\n            //TODO: set state to PlayCard or TallyPoints\r\n            if (this.player.hand.current.size() > 0)\r\n                this.setGameState(GameState.PlayCards);\r\n            else\r\n                this.setGameState(GameState.TallyPoints);\r\n        };\r\n\r\n        setTimeout(moveCardsToPlayed, Config.clearTime);\r\n    };\r\n}\r\n\r\nexport default App;\r\n","import App from './App';\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nArray.prototype.shuffle = function() {\r\n    // Fisher-Yates shuffle\r\n    let currentIndex = this.length, temporaryValue, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        // And swap it with the current element.\r\n        temporaryValue = this[currentIndex];\r\n        this[currentIndex] = this[randomIndex];\r\n        this[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}