{"version":3,"sources":["GameState.js","models/Card.js","GameLogic.js","Config.js","components/card/Card.js","components/card/index.js","components/deck/Deck.js","components/deck/index.js","components/hand/Hand.js","components/hand/index.js","components/battle/Battle.js","components/battle/index.js","components/cardStack/index.js","components/cardStack/CardStack.js","components/discard/index.js","components/discard/Discard.js","components/score/Score.js","components/score/index.js","components/points/Points.js","components/points/index.js","components/played/index.js","components/played/Played.js","containers/app/App.js","containers/app/index.js","serviceWorker.js","models/Hand.js","models/Player.js","models/GameStore.js","index.js"],"names":["Object","freeze","SelectHand","PlayCards","Battle","TallyPoints","GameOver","Card","types","model","value","optional","integer","suit","views","self","front","console","error","suitToLetter","back","GameLogic","store","classCallCheck","this","battleResults","newState","setState","GameState","startNewRound","cpu","hand","toggleSelected","tallyPoints","reset","setGameState","_this","deck","length","shuffleNewDeck","player","cleanTable","setHand","drawFive","shuffle","splice","forEach","i","j","push","create","setDeck","quantity","drawCard","hold","state","Error","playerCard","playCard","cpuCard","tie","cpuWinner","playerWinner","incrementPoints","playerPoints","points","cpuPoints","setPoints","addToPlayed","stillHasCards","scorePoints","score","battleTime","clearTime","pointsToScoreTime","imagesDir","props","classNames","isSelected","isStacked","isSpread","extraClasses","join","style","index","graphic","onSelected","react_default","a","createElement","className","src","Config","onClick","observer","Deck","id","concat","output","parseInt","card","components_card","right","bottom","key","renderCardStack","Hand","_props$hand","cards","selected","_ref","indexOf","renderCards","winner","CardStack","getClassName","map","getGraphic","getStyleFor","React","Component","Discard","Score","Points","final","Played","left","App","possibleConstructorReturn","getPrototypeOf","call","handleCardClick","cardIndex","selectCards","gameLogic","startNewGame","components_deck","discard","played","battle","renderGameOver","renderInstructions","_this2","remaining","keepCards","playerScore","cpuScore","maxToSelect","holdCards","_this3","computeBattle","setTimeout","endBattle","inject","Boolean","window","location","hostname","match","array","actions","setCards","slice","found","removeUnselectedCards","notSelected","detach","removeSelectedCards","selectedCards","Player","log","Math","max","GameStore","Array","prototype","temporaryValue","randomIndex","currentIndex","floor","random","ReactDOM","render","mobx_react_module","app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6936e316.chunk.js","sourcesContent":["export default Object.freeze({\r\n    SelectHand: 1,\r\n    PlayCards: 2,\r\n    Battle: 3,\r\n    TallyPoints: 4,\r\n    GameOver: 5\r\n});","import {types} from 'mobx-state-tree';\r\n\r\nconst suitToLetter = (suit) => {\r\n    switch (suit) {\r\n        case 0:\r\n            return 'c';\r\n        case 1:\r\n            return 'd';\r\n        case 2:\r\n            return 'h';\r\n        case 3:\r\n            return 's';\r\n        default:\r\n            console.error('invalid suit: ' + suit);\r\n            return 'c';\r\n    }\r\n};\r\n\r\nconst Card = types.model('Card', {\r\n    value: types.optional(types.integer, -1),\r\n    suit: types.optional(types.integer, -1)\r\n}).views(self => ({\r\n    get front() {\r\n        return self.value + suitToLetter(self.suit) + '.gif';\r\n    },\r\n\r\n    get back() {\r\n        return 'b.gif';\r\n    }\r\n}));\r\n\r\nexport default Card;","import GameState from './GameState';\r\nimport Card from './models/Card';\r\n\r\n\r\nclass GameLogic {\r\n    constructor(store) {\r\n        this.store = store;\r\n        this.battleResults = {};\r\n    }\r\n\r\n    setGameState(newState) {\r\n        this.store.setState(newState);\r\n\r\n        switch (newState) {\r\n            case GameState.SelectHand:\r\n                this.startNewRound();\r\n                break;\r\n\r\n            case GameState.PlayCards:\r\n                // CPU picks a card to play\r\n                this.store.cpu.hand.toggleSelected(0);\r\n                break;\r\n\r\n            case GameState.Battle:\r\n                // do nothing\r\n                break;\r\n\r\n            case GameState.TallyPoints:\r\n                this.tallyPoints();\r\n                break;\r\n\r\n            case GameState.GameOver:\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    startNewGame() {\r\n        this.store.reset();\r\n        this.setGameState(GameState.SelectHand);\r\n    }\r\n\r\n    startNewRound() {\r\n        // reshuffle deck if necessary\r\n        if (this.store.deck.length < 10) {\r\n            this.shuffleNewDeck();\r\n            this.store.player.cleanTable();\r\n            this.store.cpu.cleanTable();\r\n        }\r\n\r\n        this.store.player.setHand(this.drawFive());\r\n        this.store.cpu.setHand(this.drawFive());\r\n\r\n        const randomHand = [0, 1, 2, 3, 4].shuffle().splice(0, 3);\r\n        randomHand.forEach(i => {\r\n            this.store.cpu.hand.toggleSelected(i);\r\n        });\r\n    }\r\n\r\n    shuffleNewDeck() {\r\n        const deck = [];\r\n        for (let i = 1; i <= 13; i++) {\r\n            for (let j = 0; j < 4; j++)\r\n                deck.push(Card.create({ value: i, suit: j }));\r\n        }\r\n        deck.shuffle();\r\n        this.store.setDeck(deck);\r\n    }\r\n\r\n    drawFive() {\r\n        let quantity = 5;\r\n\r\n        const hand = [];\r\n        while (quantity--)\r\n            hand.push(this.store.drawCard());\r\n        return hand;\r\n    }\r\n\r\n    holdCards() {\r\n        this.store.player.hold();\r\n        this.store.cpu.hold();\r\n    }\r\n\r\n    computeBattle() {\r\n        if (this.store.state !== GameState.Battle)\r\n            throw new Error('Computing battle in wrong state');\r\n\r\n        const playerCard = this.store.player.playCard();\r\n        const cpuCard = this.store.cpu.playCard();\r\n\r\n        const tie = cpuCard.value === playerCard.value;\r\n        const cpuWinner = cpuCard.value > playerCard.value;\r\n        const playerWinner = !tie && !cpuWinner;\r\n\r\n        return this.battleResults = {\r\n            playerCard: playerCard,\r\n            cpuCard: cpuCard,\r\n            tie: tie,\r\n            playerWinner: playerWinner,\r\n            cpuWinner: cpuWinner\r\n        };\r\n    }\r\n\r\n    incrementPoints() {\r\n        if (this.battleResults.playerWinner)\r\n            this.store.player.incrementPoints();\r\n        else if (this.battleResults.cpuWinner)\r\n            this.store.cpu.incrementPoints();\r\n    }\r\n\r\n    tallyPoints() {\r\n        if (this.store.state !== GameState.TallyPoints)\r\n            throw new Error('tallying points in wrong state');\r\n\r\n        let playerPoints = this.store.player.points;\r\n        let cpuPoints = this.store.cpu.points;\r\n\r\n        // check for a loss\r\n        if (playerPoints === 3)\r\n            playerPoints = -3;\r\n        else if (cpuPoints === 3)\r\n            cpuPoints = -3;\r\n\r\n        this.store.player.setPoints(playerPoints);\r\n        this.store.cpu.setPoints(cpuPoints);\r\n    }\r\n\r\n    endBattle() {\r\n        this.store.player.addToPlayed(this.battleResults.playerCard);\r\n        this.store.cpu.addToPlayed(this.battleResults.cpuCard);\r\n        this.battleResults = {};\r\n\r\n        // set state to PlayCard or TallyPoints\r\n        if (this.store.player.stillHasCards) {\r\n            this.setGameState(GameState.PlayCards);\r\n        } else {\r\n            this.setGameState(GameState.TallyPoints);\r\n        }\r\n    }\r\n\r\n    scorePoints() {\r\n        this.store.player.scorePoints();\r\n        this.store.cpu.scorePoints();\r\n\r\n        // start another round or game over\r\n        if (this.store.player.score >= 10\r\n            || this.store.cpu.score >= 10) {\r\n            this.setGameState(GameState.GameOver);\r\n        } else {\r\n            this.setGameState(GameState.SelectHand);\r\n        }\r\n    }\r\n}\r\n\r\nexport default GameLogic;","export default Object.freeze({\r\n    battleTime: 1000,\r\n    clearTime: 3000,\r\n    pointsToScoreTime: 2000,\r\n    imagesDir: 'images/cards/'\r\n});","import React from \"react\";\r\nimport Config from \"../../Config\";\r\n\r\nfunction Card(props) {\r\n    const classNames = [];\r\n    if (props.isSelected)\r\n        classNames.push('selected');\r\n    if (props.isStacked)\r\n        classNames.push('stacked');\r\n    else if (props.isSpread)\r\n        classNames.push('spread');\r\n    const extraClasses = classNames.join(' ');\r\n\r\n    const style = props.style;\r\n    const index = props.index;\r\n    const graphic = props.graphic;\r\n    const onSelected = props.onSelected;\r\n\r\n    return (\r\n        <div className={\"card \" + extraClasses} style={style}>\r\n            <img src={Config.imagesDir + graphic}\r\n                 className=\"card\"\r\n                 onClick={onSelected\r\n                     ? () => onSelected(index)\r\n                     : null}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import Card from './Card';\r\n\r\nexport default Card;","import React from 'react';\r\nimport {observer} from 'mobx-react';\r\nimport './Deck.css';\r\nimport Card from '../card';\r\n\r\n\r\nfunction Deck(props) {\r\n    const {deck} = props;\r\n\r\n    const renderCardStack = () => {\r\n        if (deck.length === 0)\r\n            return null;\r\n\r\n        const graphic = deck[0].back;\r\n        const output = [];\r\n        for (let i = 0; i < parseInt(deck.length / 5); i++) {\r\n            const card = <Card isStacked={true}\r\n                               graphic={graphic}\r\n                               style={{right: (i * 2) + 'px', bottom: i + 'px'}}\r\n                               key={i}/>;\r\n            output.push(card);\r\n        }\r\n        return output;\r\n    };\r\n\r\n    return (\r\n        <div id={`${props.id}`}>\r\n            {renderCardStack()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default observer(Deck);","import Deck from './Deck';\r\n\r\nexport default Deck;","import React from 'react';\r\nimport {observer} from 'mobx-react';\r\nimport './Hand.css';\r\nimport Card from '../card';\r\n\r\n\r\nfunction Hand(props) {\r\n    const {cards, selected} = props.hand;\r\n\r\n    const renderCards = () => {\r\n        const output = [];\r\n        cards.forEach(({front, back}, i) => {\r\n            const graphic = props.player ? front : back;\r\n            const isSelected = selected.indexOf(i) !== -1;\r\n            const onSelected = props.onSelected;\r\n            const card = <Card key={i}\r\n                               index={i}\r\n                               isSelected={isSelected}\r\n                               isSpread={true}\r\n                               graphic={graphic}\r\n                               onSelected={onSelected}/>;\r\n            output.push(card);\r\n        });\r\n        return output;\r\n    };\r\n\r\n    return (\r\n        <div id={`${props.id}`} className='hand'>\r\n            {renderCards()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default observer(Hand);","import Hand from './Hand';\r\n\r\nexport default Hand;","import React from 'react';\r\nimport './Battle.css';\r\nimport Card from '../card';\r\n\r\n\r\nfunction Battle(props) {\r\n    if (!props.card)\r\n        return null;\r\n\r\n    const {front} = props.card;\r\n\r\n    return (\r\n        <div id={`${props.id}`} className=\"battle\">\r\n            {props.winner ? <div className=\"battle_result\">Winner!</div> : ''}\r\n            {props.tie ? <div className=\"battle_result\">Tie...</div> : ''}\r\n            <Card graphic={front}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Battle;","import Battle from './Battle';\r\n\r\nexport default Battle;","import CardStack from './CardStack';\r\nexport default CardStack;","import React from 'react';\r\nimport Card from '../card';\r\n\r\nclass CardStack extends React.Component {\r\n    render() {\r\n        const {cards} = this.props;\r\n\r\n        const renderCards = () => {\r\n            return cards.map((card, i) =>\r\n                <Card key={i}\r\n                      isStacked={true}\r\n                      graphic={this.getGraphic(card)}\r\n                      style={this.getStyleFor(i)}\r\n                />\r\n            );\r\n        };\r\n\r\n        return (\r\n            <div id={`${this.props.id}`} className={this.getClassName()}>\r\n                {renderCards()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CardStack;","import Discard from './Discard';\r\n\r\nexport default Discard;","import './Discard.css';\r\nimport CardStack from '../cardStack';\r\n\r\n\r\nclass Discard extends CardStack {\r\n    getGraphic = ({back}) => {\r\n        return back;\r\n    };\r\n\r\n    getStyleFor = (i) => {\r\n        return {right: (i * 5) + 'px'};\r\n    };\r\n\r\n    getClassName = () => {\r\n        return 'discard';\r\n    }\r\n}\r\n\r\nexport default Discard;","import React from 'react';\r\nimport './Score.css';\r\n\r\n\r\nfunction Score(props) {\r\n    return (\r\n        <div id={`${props.id}`} className=\"score\">\r\n            score: {props.score}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Score;","import Score from './Score';\r\n\r\nexport default Score;","import React from 'react';\r\nimport './Points.css';\r\n\r\n\r\n\r\nfunction Points(props) {\r\n    if (props.points === 0)\r\n        return null;\r\n\r\n    return (\r\n        <div id={`${props.id}`} className=\"points\">\r\n            points: <span className={props.final ? 'final' : ''}>{props.points}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Points;","import Points from './Points';\r\n\r\nexport default Points;","import Played from './Played';\r\n\r\nexport default Played;","import './Played.css';\r\nimport CardStack from '../cardStack';\r\n\r\nclass Played extends CardStack {\r\n    getGraphic = ({front}) => {\r\n        return front;\r\n    };\r\n\r\n    getStyleFor = (i) => {\r\n        return {left: (i * 15) + 'px'};\r\n    };\r\n\r\n    getClassName = () => {\r\n        return 'played';\r\n    }\r\n}\r\n\r\nexport default Played;","import React, { Component } from 'react';\r\nimport { observer, inject } from 'mobx-react'; //These functions make our components observable and be able to use the store\r\nimport './App.css';\r\nimport GameLogic from '../../GameLogic';\r\nimport GameState from '../../GameState';\r\nimport Deck from '../../components/deck';\r\nimport Hand from '../../components/hand';\r\nimport Battle from '../../components/battle';\r\nimport Discard from '../../components/discard';\r\nimport Score from '../../components/score';\r\nimport Points from '../../components/points';\r\nimport Played from '../../components/played';\r\nimport Config from '../../Config';\r\n\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.gameLogic = new GameLogic(props.store);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startNewGame();\r\n    }\r\n\r\n    render() {\r\n        const { store } = this.props;\r\n        const final = store.state === GameState.TallyPoints;\r\n\r\n        return (\r\n            <div>\r\n                <h1>Tapatio Poker</h1>\r\n                <div id=\"game_board\">\r\n                    <Deck id='deck' deck={store.deck}/>\r\n                    <Hand id='my_hand' hand={store.player.hand} player={true} onSelected={this.handleCardClick}/>\r\n                    <Hand id=\"cpu_hand\" hand={store.cpu.hand} player={false}/>\r\n                    <Discard id=\"my_discard\" cards={store.player.discard}/>\r\n                    <Discard id=\"cpu_discard\" cards={store.cpu.discard}/>\r\n                    <Played id=\"my_played\" cards={store.player.played}/>\r\n                    <Played id=\"cpu_played\" cards={store.cpu.played}/>\r\n                    <Battle id=\"my_battle\" card={this.state.playerCard} winner={this.state.playerWinner}\r\n                            tie={this.state.tie}/>\r\n                    <Battle id=\"cpu_battle\" card={this.state.cpuCard} winner={this.state.cpuWinner}\r\n                            tie={this.state.tie}/>\r\n                    <Points id=\"my_points\" points={store.player.points} final={final}/>\r\n                    <Points id=\"cpu_points\" points={store.cpu.points} final={final}/>\r\n                    <Score id=\"my_score\" score={store.player.score}/>\r\n                    <Score id=\"cpu_score\" score={store.cpu.score}/>\r\n\r\n                    {this.renderGameOver()}\r\n                </div>\r\n                <div>\r\n                    {this.renderInstructions()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderInstructions() {\r\n        const { store } = this.props;\r\n        const { state } = store;\r\n\r\n        switch (state) {\r\n            case GameState.SelectHand:\r\n                const remaining = 3 - store.player.hand.selected.length;\r\n                if (remaining > 0)\r\n                    return <div>Select {remaining} more card{remaining === 1 ? '' : 's'} to keep</div>;\r\n\r\n                return <button onClick={() => this.keepCards()}>Keep Cards</button>;\r\n\r\n            case GameState.PlayCards:\r\n                if (!store.player.hand.selected.length)\r\n                    return <div>Select a card to play</div>;\r\n\r\n                return <button onClick={() => this.playCard()}>Play Card</button>;\r\n\r\n            case GameState.GameOver:\r\n                return <button onClick={() => this.startNewGame()}>Play Again</button>;\r\n\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n\r\n    renderGameOver() {\r\n        const { store } = this.props;\r\n        const state = store.state;\r\n\r\n        if (state !== GameState.GameOver)\r\n            return null;\r\n\r\n        const playerScore = store.player.score;\r\n        const cpuScore = store.cpu.score;\r\n\r\n        if (playerScore === cpuScore)\r\n            return <div id=\"game_over\">Tie Game!</div>;\r\n\r\n        if (playerScore > cpuScore)\r\n            return <div id=\"game_over\">You Win!</div>;\r\n\r\n        return <div id=\"game_over\">Computer Wins!</div>;\r\n    };\r\n\r\n\r\n    // ----- Internal Functions --------------------\r\n\r\n    startNewGame() {\r\n        this.gameLogic.startNewGame();\r\n    };\r\n\r\n    selectCards(cardIndex, maxToSelect) {\r\n        const hand = this.props.store.player.hand;\r\n\r\n        if (hand.isSelected(cardIndex) || hand.selected.length < maxToSelect)\r\n            hand.toggleSelected(cardIndex);\r\n    }\r\n\r\n    keepCards() {\r\n        this.gameLogic.holdCards();\r\n        this.gameLogic.setGameState(GameState.PlayCards);\r\n    }\r\n\r\n    playCard() {\r\n        const { store } = this.props;\r\n\r\n        this.gameLogic.setGameState(GameState.Battle);\r\n        const battleResults = this.gameLogic.computeBattle();\r\n        const { playerCard, cpuCard } = battleResults;\r\n\r\n        // set partial battle results now\r\n        this.setState({ playerCard, cpuCard });\r\n\r\n        // show the rest later\r\n        setTimeout(() => {\r\n            this.setState(battleResults);\r\n            this.gameLogic.incrementPoints();\r\n        }, Config.battleTime);\r\n\r\n        const endBattle = () => {\r\n            // clear battle results\r\n            this.setState({ playerCard: null, cpuCard: null, cpuWinner: false, playerWinner: false, tie: false });\r\n\r\n            this.gameLogic.endBattle();\r\n            if (store.state === GameState.TallyPoints) {\r\n                setTimeout(() => {\r\n                    this.gameLogic.scorePoints();\r\n                }, Config.pointsToScoreTime);\r\n            }\r\n        };\r\n\r\n        setTimeout(endBattle, Config.clearTime);\r\n    }\r\n\r\n\r\n    // ----- Interface Functions --------------------\r\n\r\n    handleCardClick = (cardIndex) => {\r\n        const { state } = this.props.store;\r\n\r\n        switch (state) {\r\n            case GameState.SelectHand:\r\n                this.selectCards(cardIndex, 3);\r\n                break;\r\n\r\n            case GameState.PlayCards:\r\n                this.selectCards(cardIndex, 1);\r\n                break;\r\n\r\n            default:\r\n                // do nothing\r\n                break;\r\n        }\r\n    };\r\n}\r\n\r\nexport default inject('store')(observer(App));","import App from './App';\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {types} from 'mobx-state-tree';\r\nimport Card from './Card';\r\nimport {detach} from 'mobx-state-tree';\r\n\r\n\r\nconst Hand = types.model('Player', {\r\n    cards: types.array(Card),\r\n    selected: types.array(types.integer),\r\n}).actions(self => ({\r\n    setCards(cards) { self.cards = cards.slice(); },\r\n\r\n    toggleSelected(cardIndex) {\r\n        const found = self.selected.indexOf(cardIndex);\r\n        if (found === -1)\r\n            self.selected.push(cardIndex);\r\n        else\r\n            self.selected.splice(found, 1);\r\n    },\r\n\r\n    removeUnselectedCards() {\r\n        const notSelected = [];\r\n        for (let i = 4; i >= 0; i--) {\r\n            if (self.selected.indexOf(i) === -1)\r\n                notSelected.push(detach(self.cards[i]));\r\n        }\r\n\r\n        self.selected = [];\r\n\r\n        return notSelected;\r\n    },\r\n\r\n    removeSelectedCards() {\r\n        const selectedCards = [];\r\n        for (let i = 4; i >= 0; i--) {\r\n            if (self.selected.indexOf(i) !== -1)\r\n                selectedCards.push(detach(self.cards[i]));\r\n        }\r\n\r\n        self.selected = [];\r\n\r\n        return selectedCards;\r\n    }\r\n\r\n})).views(self => ({\r\n    isSelected(cardIndex) { return self.selected.indexOf(cardIndex) !== -1; },\r\n\r\n    get stillHasCards() { return self.cards.length > 0; }\r\n}));\r\n\r\nexport default Hand;","import { types } from 'mobx-state-tree';\r\nimport Hand from './Hand';\r\nimport Card from './Card';\r\n\r\n\r\nconst Player = types.model('Player', {\r\n    hand: types.optional(Hand, () => Hand.create()),\r\n    discard: types.array(Card),\r\n    played: types.array(Card),\r\n    points: types.optional(types.integer, 0),\r\n    score: types.optional(types.integer, 0)\r\n}).actions(self => ({\r\n    setHand(cards) { self.hand.setCards(cards); },\r\n\r\n    hold() {\r\n        const cards = self.hand.removeUnselectedCards();\r\n        self.discard = self.discard.concat(cards);\r\n    },\r\n\r\n    playCard() {\r\n        const cards = self.hand.removeSelectedCards();\r\n        console.log('removed', cards);\r\n        return cards[0];\r\n    },\r\n\r\n    incrementPoints() { self.points++; },\r\n\r\n    setPoints(points) { self.points = points; },\r\n\r\n    scorePoints() {\r\n        self.score = Math.max(0, self.score + self.points);\r\n        self.points = 0;\r\n    },\r\n\r\n    addToPlayed(card) { self.played.push(card); },\r\n\r\n    cleanTable() {\r\n        self.discard = [];\r\n        self.played = [];\r\n    }\r\n\r\n})).views(self => ({\r\n    get stillHasCards() { return self.hand.stillHasCards; },\r\n\r\n}));\r\n\r\nexport default Player;","import {detach, types} from 'mobx-state-tree';\r\nimport Player from './Player';\r\nimport Card from './Card';\r\n\r\n\r\nconst GameStore = types.model('GameStore', {\r\n    player: types.optional(Player, () => Player.create()),\r\n    cpu: types.optional(Player, () => Player.create()),\r\n    deck: types.array(Card),\r\n    state: types.optional(types.integer, -1),\r\n}).actions(self => ({\r\n    setState(state) { self.state = state; },\r\n\r\n    setDeck(deck) { self.deck = deck; },\r\n\r\n    drawCard() { return detach(self.deck[0]); },\r\n\r\n    reset() {\r\n        self.player = Player.create();\r\n        self.cpu = Player.create();\r\n        self.deck = [];\r\n    }\r\n\r\n})).views(self => ({\r\n    // rasterize the output getters\r\n}));\r\n\r\nexport default GameStore;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'mobx-react';\r\nimport './index.css';\r\nimport App from './containers/app';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport GameStore from './models/GameStore';\r\n//debugging tools\r\n//import {onPatch} from 'mobx-state-tree';\r\n//import makeInspectable from 'mobx-devtools-mst';\r\n\r\nArray.prototype.shuffle = function () {\r\n    // Fisher-Yates shuffle\r\n    let currentIndex = this.length, temporaryValue, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        // And swap it with the current element.\r\n        temporaryValue = this[currentIndex];\r\n        this[currentIndex] = this[randomIndex];\r\n        this[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\nconst store = GameStore.create({});\r\n// makeInspectable(store);\r\n//\r\n// onPatch(store, patch => {\r\n//     console.log(patch)\r\n// });\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}